@page "/order"
@layout MainLayout
@using LunchApp.Shared.DTOs
@inject ApiService Api

<h3 class="mb-4 text-center">Place Your Order</h3>

@if (timeSlots == null)
{
    <div class="text-center"><div class="spinner-border"></div></div>
}
else
{
    <div class="card mx-auto" style="max-width: 500px;">
        <div class="card-body">
            <h5 class="card-title">Select Pickup Time</h5>
            @foreach (var slot in timeSlots)
            {
                <button class="btn @(slot.Time == selectedTime ? "btn-primary" : "btn-outline-primary") mb-2 w-100 text-start"
                        @onclick="() => SelectTime(slot.Time)">
                    @slot.Time (@slot.Count orders)
                </button>
            }
            @if (!string.IsNullOrEmpty(selectedTime))
            {
                <div class="mt-3 text-center">
                    <p>Selected: <strong>@selectedTime</strong></p>
                    <button class="btn btn-success" @onclick="SubmitOrder">Submit Order</button>
                </div>
            }
            @if (!string.IsNullOrEmpty(orderMessage))
            {
                <div class="alert alert-success mt-3">@orderMessage</div>
            }
        </div>
    </div>
}

@code {
    List<TimeSlotDto> timeSlots;
    string selectedTime, orderMessage;
    protected override async Task OnInitializedAsync()
    {
        timeSlots = await Api.GetTimeSlots(DateTime.Today);
    }
    void SelectTime(string t)
    {
        selectedTime = t; orderMessage = null;
    }
    async Task SubmitOrder()
    {
        var dto = new OrderCreateDto
        {
            SlotId = timeSlots.First(ts => ts.Time == selectedTime).Id,
            Items = new List<OrderItemDto> { new() { DishId = 0, Quantity = 1 } }
        };
        await Api.PlaceOrder(dto);
        orderMessage = "Order placed!";
    }
}
